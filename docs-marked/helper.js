const SampleText =
  "## markdown-it-container\n::: info\n  *tips: infoホゲホゲ*\n:::\n::: success\n  *tips: successホゲホゲ*\n:::\n::: warning\n  *tips: warningホゲホゲ*\n:::\n::: danger\n  *tips: dangerホゲホゲ*\n:::\n\`\`\`\n::: info\n    *tips: ホゲホゲ*\n:::\n::: success\n    *tips: ホゲホゲ*\n:::\n::: warning    *tips: ホゲホゲ*\n:::\n  ::: danger\n    *tips: ホゲホゲ*\n:::\n\`\`\` \n## ElectronとVueとの連携について\nelectronというフロントエンド技術で、デスクトップアプリを作れるフレームワークがあり、有名なサービスとしては、Atom、VScode、SlackとDiscordのデスクトップ版などで使われているそうです。\n\n今回は、それをvueで記述してビルドできるようにしてくれるプラグイン[vue-cli-plugin-electron-builder](https://nklayman.github.io/vue-cli-plugin-electron-builder/)を使って、Vueで作成してみました。\n\nでは、これから簡単な手順や実際に作ってみたオーディオプレイヤーについて紹介します。\n\n---\n## 環境\n- Mac Book Pro (Catalina)\n- Node.js(v14.15.1)\n- vue-cli(v4.5.8)\n\n  [ドキュメント: vue-cli-plugin-electron-builder](https://nklayman.github.io/vue-cli-plugin-electron-builder/)\n  [ドキュメント: electron](https://www.electronjs.org)\n\n## プロジェクトの作り方\n1. `vue create プロジェクト名`\n\n1. `yarn install`\n\n1. `vue add electron-builder`\n\n1. `electron:serve`でローカルで実行\n\n1. `electron:build`でビルド\n\n---\n## AudioPlayerについて\n**完成品**\n![image](https://images.microcms-assets.io/protected/ap-northeast-1:7cf4e012-34b8-42e4-9878-9730fb0adfdc/service/imagestore/media/audio-player-play-moz.png?h=300&w=200)![image](https://images.microcms-assets.io/protected/ap-northeast-1:7cf4e012-34b8-42e4-9878-9730fb0adfdc/service/imagestore/media/audio-plyer-visializer.png?h=300&w=200)![image](https://images.microcms-assets.io/protected/ap-northeast-1:7cf4e012-34b8-42e4-9878-9730fb0adfdc/service/imagestore/media/audio-player-list-moz.png?h=300&w=200)\n\n---\n## 使用したモジュール\n- [howler.js](https://howlerjs.com/)\n   HTML 5 Audio機能を用いた音楽再生管理のためのライブラリ\n- [music-metadata-browser](https://github.com/Borewit/music-metadata-browser)\n    MP3、M4Aなどの音楽ファイルに含まれているID3情報を読み出すためのものです\n- [electron-browser-storage](https://github.com/jerry1100/electron-browser-storage)\n   メインプロセスでWebStrageを使うためのもの\n\n---\n## 仕様など\n\n- 基本的には、howler.jsを利用して曲の再生、停止を制御しています。\n\n- アーティストや曲のアートワークは、[music-metadata-browser](https://github.com/Borewit/music-metadata-browser)というもの\nを利用して、初回に全てのID3情報を取り出しています。\n\n---\n## 詰まった点\n### windowの情報を設定として保存したい(WebStrage)\nelectronはmainとrendererでプロセスが分かれており、ウィンドウ関連はメインプロセスになっています。\nそのため、ウィンドウの色や大きさを、設定し読み込みたい場合、メインプロセスで適用させてやらないと反映されませんが、通常の方法では、メインプロセスでWebStrageが使えません。\n\nその時活躍するのが[electron-browser-storage](https://github.com/jerry1100/electron-browser-storage)です。\nまた、設定に関する操作はレンダラープロセスのGUIを通して行うのでプロセス間通信を行いメインに定義されたイベントを発火する必要があります。\n\nプロセス間通信についてはこちらを参考にしました 。\n[[Electron] IPC には新しい ipcRenderer.invoke() メソッドを使ったほうが便利 (v7+) - Qiita](https://qiita.com/jrsyo/items/abe19dff2d950132d9cd#新しい-renderer--main-プロセス間通信-ipc)\n   \n### Howler.jsで曲を変更する時にいちいちオブジェクトごと作り替えるのがめんどくさい。\n自分なりにHowlerのソースコードを読み込んで、このようにしたら、音量、ループ状態の設定を維持したまま変更できると考え実装しました。\n\n(一応、issueコメント残してみました)\n[goldfire/howler.js - github](https://github.com/goldfire/howler.js/issues/825#issuecomment-703250406)\n\n```javascript\nHowl.prototype.changeMusic = function(o) {\n  var self = this;\n  self.unload(true);\n  self._duration = 0;\n  self._sprite = {};\n  self._src = typeof o.data !== 'string' ? o.data : [o.data];\n  self._format = typeof o.format !== 'string' ? o.format : [o.format];\n};\n```\n\n### WindowsとMacでUIが違いすぎる\nWebKitのベンダープレフィックスで頑張って合わせましょう。\n自分の場合は、Mac寄りのシンプルなデザインになるように調節しました。\n\nレンジ入力(シークバー)\n```css\ninput[type='range'] {\n  appearance: none;\n  height: 3px;\n  width: 70%;\n  background-color: gray;\n  cursor: pointer;\n  border-radius: 8px;\n  outline: none;\n}\n\ninput[type='range']::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  background-color: white;\n}\n```\n\nプレイリストのスクロールバー\n```css\n.play-list::-webkit-scrollbar {\n  width: 5px;\n}\n\n.play-list::-webkit-scrollbar-track {\n  display: none;\n}\n\n.play-list::-webkit-scrollbar-thumb {\n  width: 100%;\n  background-color: gray;\n  border-radius: 5px;\n}\n```\n\n### MacとWindowsで表示サイズが同じにならない\nウィンドウ自体のサイズはcssで解決できない問題で、デフォルトだとタイトルバーがウィンドウサイズの計算に入っており、MacとWindowsで表示サイズが違うという状態になってしまいます。\n\nこれは`useContentSize`をtrueにすれば解決できます。\n[Electron ドキュメント - new BrowserWindow([options])](https://www.electronjs.org/docs/api/browser-window#new-browserwindowoptions)\n```javascript\nfunction createWindow(setting) {\n  win = new BrowserWindow({\n    width: 310,\n    height: 520,\n    x: 100,\n    y: 100,\n    resizable: true,\n    alwaysOnTop: setting.alwaysOnTop,\n    backgroundColor: setting.backgroundColor,\n    autoHideMenuBar: true,\n    useContentSize: true,\n    webPreferences: {\n      nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION\n    }\n  });\n\n  // 略...\n}\n```\n\n---\n## 反省\nウィンドウ縮小化状態の再生状態が稀に狂うことがあったり、まだまだ改善の余地がありますが、\nそれぞれのドキュメントを行ったり来たりしながら、自分なりに動けたところは、良かったかなと思っています。\n    ";

document.addEventListener("DOMContentLoaded", () => {
  document.getElementById("wc-slide").setAttribute("md-text", SampleText);
});
